<% include ../share/header.ejs %>

<style type="text/css">
    .btn-xs{
        margin:1px;
    }
</style>
<!-- CONTENTS -->
<div class="container">
    <div class="page-header">
        <h1>트랜스미션 관리<br><small>토렌트 추가, 트랜스미션 관리, 미니 탐색기</small></h1>
    </div>
    <!-- 네비게이션 메뉴 -->
    <nav class="col-lg-12">
        <ul class="nav nav-tabs nav-justified" role="tablist">
            <li class="nav-item text-center active">
                <a class="nav-link" data-toggle="tab" href="#torrent">Torrent</a>
            </li>
            <li class="nav-item text-center">
                <a class="nav-link" data-toggle="tab" onclick="transmission();" href="#transmission">Transmission</a>
            </li>
            <li class="nav-item text-center">
                <a class="nav-link" data-toggle="tab" onclick="explorer();" href="#Explorer">Explorer</a>
            </li>
        </ul>
    </nav>
    <!-- 네비게이션 메뉴 끝 -->
    <div class="col-lg-12 tab-content">
        <!-- 토렌트 파트 -->
        <div class="tab-pane active" id="torrent" role="tabpanel">
            <!-- 토렌트 검색 -->
            <div id="form1" class="col-lg-12" style="margin: 1%">
                <div class="form-group">
                    <input type="text" class="form-control" id="torrentTitle" placeholder="프로그램 제목을 입력하세요" required>
                </div>
                <div class="text-right">
                    <a type="button" onclick="torrentSearch();" class="btn btn-sm btn-default">검색</a>
                </div>
            </div>
            <!-- 토렌트 검색 끝 -->
            <!-- 토렌트 검색 결과 -->
            <div class="col-lg-12" id="torrentList" style="margin: 1%">
            
            </div>
            <!-- 토렌트 검색 결과 끝-->
        </div>
        <!-- 토렌트 파트 끝 -->

        <!-- transmission 파트 -->
        <div class="tab-pane" id="transmission" role="tabpanel">
            <!-- //위쪽 상태바 재개, 정지, 삭제, 로컬에서 함께 삭제, || 전체 재개, 전체 정지 || 파일이동-->
            <div class="col-lg-12 text-center" style="padding:1%">
                <a type="button" onclick="control('1');" class="btn btn-default btn-xs"><i class="fas fa-play"></i>시작</a>
                <a type="button" onclick="control('2');" class="btn btn-default btn-xs"><i class="fas fa-stop"></i>정지</a>
                <a type="button" onclick="isOk('3');" class="btn btn-default btn-xs"><i class="fas fa-ban"></i>삭제</a>
                <a type="button" onclick="isOk('4');" class="btn btn-default btn-xs"><i class="far fa-trash-alt"></i>데이터도 삭제</a>
                <span class="button-split"> | </span>
                <a type="button" onclick="control('5');" class="btn btn-default btn-xs">전체 시작</a>
                <a type="button" onclick="control('6');" class="btn btn-default btn-xs">전체 정지</a>
                <span class="button-split"> | </span>
                <a type="button" onclick="control('10');" class="btn btn-default btn-xs"><i class="fas fa-sync"></i>DLNA 새로고침</a>
            </div>
            <!-- 트랜스미션 작업 리스트 -->
            <div class="col-lg-12" id="transmission_contents">

            </div>
            <!-- 트랜스미션 작업 리스트 끝 -->
        </div>
        <!-- transmission 파트 끝 -->

        <!-- Explorer 파트-->
        <div class="tab-pane" id="Explorer" role="tabpanel">
            <div class="col-lg-12 text-center" style="padding:1%">
                <div class="dropdown btn-group" role="group">
                    <button class="btn btn-default dropdown-toggle btn-xs" type="button" id="fastMoveBtn" data-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-fighter-jet"></i>빠른이동<span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" id="fastMoveMenu" role="menu" aria-labelledby="dropdownMenu">
                        <!-- 빠른이동 메뉴에 추가될 내용 -->
                    </ul>
                </div>
                <div class="dropdown btn-group" role="group">
                    <button class="btn btn-default dropdown-toggle btn-xs" type="button" id="fastMoveBtn" data-toggle="dropdown" aria-expanded="false">
                            <i class="far fa-star"></i>즐겨찾기<span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" id="favoriteMenu" role="menu" aria-labelledby="dropdownMenu">
                        <!-- 즐겨찾기 메뉴에 추가될 내용 -->
                    </ul>
                </div>
                <span class="button-split"> | </span>
                <a type="button" onclick="control('11');" class="btn btn-default btn-xs"><i class="fas fa-cut"></i>잘라내기</a>
                <a type="button" onclick="control('12');" class="btn btn-default btn-xs"><i class="fas fa-paste"></i>붙여넣기</a>
                <a type="button" onclick="isOk('14');" class="btn btn-default btn-xs"><i class="far fa-trash-alt"></i>파일삭제</a>
                <div class="dropdown btn-group" role="group">
                    <button class="btn btn-default dropdown-toggle btn-xs" type="button" id="fastMoveBtn" data-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-cogs"></i>파일관리<span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu">
                        <li role="presentation"><a type="button" onclick="rename(1)"; class="btn btn-default btn-xs"><i class="fas fa-equals"></i>이름통일</a></li>
                        <li role="presentation"><a type="button" class="btn btn-default btn-xs"><i class="fas fa-plus"></i>새폴더</a></li>
                        <li role="presentation"><a type="button" class="btn btn-default btn-xs"><i class="far fa-file-archive"></i>압축풀기</a></li>
                    </ul>
                </div>
                <span class="button-split"> | </span>
                <a type="button" onclick="control('10');" class="btn btn-default btn-xs"><i class="fas fa-sync"></i>DLNA</a>
            </div>
            <div class="col-lg-12" id="explorerContents">

            </div>
        </div>
        <!-- Explorer 파트 끝-->

    </div>
</div>

<script>
    $(document).ready(function () {
        $("#torrentTitle").focus();
        //페이지가 처음 로딩될 때만 서버에서 기본 세팅값을 로딩한다.
        $.ajax({
            type:"POST",
            url:"/main/getDefaultSetting",
            success:function(result){
                if($.trim(result.result) == "true"){
                    var favoriteList = '';
                    var fastMoveList = '';
                    for (var i in result.data){
                        //pwd 설정
                        if(result.data[i].name == '홈'){
                            dir.pwd(result.data[i].path);
                        }
                        dir.nameList(result.data[i].name);
                        dir.pathList(result.data[i].path);
                        favoriteList += '<li role="presentation"><a type="button" tabindex="-1" onclick="explorer(\''+i+'//\');" class="btn btn-default btn-xs">'+result.data[i].name+'</a></li>';
                        fastMoveList += '<li role="presentation"><a type="button" tabindex="-1" onclick="fastMove(\''+i+'\');" class="btn btn-default btn-xs">'+result.data[i].name+'</a></li>'
                    }
                    $('#favoriteMenu').append(favoriteList);
                    $('#fastMoveMenu').append(fastMoveList);
                }
                else{
                    alert(result.data);
                }
            }
        });
    });

    //file 이름 앞 뒤에 "를 붙여 리눅스가 하나의 이름으로 인식하게 하는 파일명을 만들어주는 함수
    var fullname = function fullname(name){
        if (name.charAt(name.length-1) == '/') return '\"' + name.slice(0, -1) +'\"/'
        else return '\"' + name +'\"'
    }

    //체크박스 전체체크 함수
    var checkboxAllCheck = function checkboxAllCheck(select){
        if(select == '1'){
            ($("#torrentListCheckbox").is(":checked") == true) ? $("input[name=torrentListCheck]").prop("checked", true) : $("input[name=torrentListCheck]").prop("checked", false);
        }
        else if(select == '2'){
            ($("#expCheckbox").is(":checked") == true) ? $("input[name=expListCheck]").prop("checked", true) : $("input[name=expListCheck]").prop("checked", false);
        }
    }

    /*전역 변수 대신 쓰이는 클로저*/
    //잘라내고 붙여낼 파일 리스트
    function CutFile(){
        var cutFile = '';

        this.val = function(val){
            if(val != null) cutFile = val;
            return cutFile;
        }
    }
    const cutFile = new CutFile();

    //체크된 목록 관리
    function TargetList(){
        var targetList = [];

        this.val = function(){
            return targetList;
        }
        //타겟 리스트를 비운다. 
        this.empty = function(tab){
            targetList = [];
            return targetList;
        }
        //현재 체크된 목록으로 탭에 따라서 타겟 리스트 최신화
        this.refresh = function(tab){
            targetList = [];
            if(tab == 'tr'){
                $("input:checkbox[name=torrentListCheck]:checked").each(function(){
                    targetList.push($(this).val());
                });
            }
            else if(tab == 'sh'){ 
                $("input:checkbox[name=expListCheck]:checked").each(function(){
                    targetList.push(dir.pwd() + fullname($(this).val()));
                });
            }
            return returnTargetList.val(tab);
        }
        //탭에 따라서 전체 목록 타겟 리스트에 저장
        this.full = function(tab){
            targetList = [];
            if(tab == 'tr'){
                $("input:checkbox[name=torrentListCheck]").each(function(){
                    targetList.push($(this).val());
                });
            }
            else if(tab == 'sh'){ 
                $("input:checkbox[name=expListCheck]").each(function(){
                    targetList.push(dir.pwd() + fullname($(this).val()));
                });
            }
            return returnTargetList.val(tab);
        }
    }
    const targetList = new TargetList();

    //타겟 리스트를 string으로 만들어서 리턴
    function ReturnTargetList(){
        //타겟 리스트를 스트링으로 만들어 리턴한다.
        this.val = function(tab){
            var returnData = '';
            for (var i in targetList.val()){
                returnData += targetList.val()[i];
                if(tab == 'sh') returnData += ' ';
                else if(tab == 'tr') returnData += ',';
            }
            return returnData;
        }
    }
    const returnTargetList = new ReturnTargetList();

    //Dir 세팅 저장, pwd에 대해 pop, push 가능
    function DIR(){
        var pwd;        //현재폴더
        var watch;      //토렌트 파일 업로드 폴더
        var tv;         //티비 프로그램 폴더
        var movie;      //영화 폴더 
        var personal;   //개인용 폴더
        var download;   //토렌트 다운로드 폴더
        var watch;      //토렌트 Watch 폴더

        var nameList = [];
        var pathList = [];
        var favoriteList = [];

        //DB로부터 받아온 폴더들의 이름이 저장됨
        this.nameList = function(val){
            if(val != null) nameList.push(val);
            return nameList;
        }
        //DB로부터 받아온 폴더들의 경로가 저장됨
        this.pathList = function(val){
            if(val != null) pathList.push(val);
            return pathList;
        }

        //현재 보고 있는 경로가 저장됨
        this.pwd = function(val){
            if(val != null) pwd = val;
            return pwd;
        }

        //토렌트 저장 폴더
        this.watch = function(val){
            if(val != null) watch = val;
            return watch;
        }

        //pwd 갱신
        this.pwdPop = function(){
            var temp = pwd.split('/');
            temp.pop();
            pwd = '';
            if(temp.length < 2){
                pwd = '/';
            }
            else{
                for (var i=0 ; i<temp.length-1 ; i++){
                    pwd += temp[i] +"/";
                }
            }
            return pwd;
        }
        this.pwdPush = function(pushDir){
            pwd = pwd + pushDir;
            return pwd;
        }
    }
    const dir = new DIR();

    //명령 내리기 전 한 번 확인용 함수
    var isOk = function isOk(cmd){
        if(confirm("정말로 실행합니까?")){
            control(cmd);
        };
    }

    //컨트롤바의 명령 서버에 전달
    var control = function control(cmd){
        var select = '';
        var sendCmd = '';
        //1 : 시작 2 : 정지 3: 삭제 4: 로컬에서도 삭제 5 : 전체 시작 6 : 전체 정지 
        //7: 영화폴더로 8: TV폴더로 9:개인폴더로 10: minidlna 새로고침
        //11 : 잘라내기, 12 : 붙여넣기 14 파일삭제

        //10 미만 : 트랜스미션 명령어
        if(cmd < 10){
            select = 'tr';
            sendCmd = ' --torrent '
            if(cmd == 5 || cmd == 6){   //전체 제어(전체정지, 전체삭제)
                sendCmd += targetList.full(select);
            }
            else { //체크된 것만 제어
                sendCmd += targetList.refresh(select);
            }
            // sendCmd += targetList;
            if(cmd == 1 || cmd == 5) sendCmd += ' --start';
            else if(cmd == 2 || cmd == 6) sendCmd += ' --stop';
            else if(cmd == 3) sendCmd += ' --remove';
            else if(cmd == 4) sendCmd += ' --remove-and-delete';
        }
        //10이상 : 쉘 명령어, Explorer 탭
        else{
            select = 'sh';
            //dlna 새로고침
            if(cmd == 10){
                sendCmd = "sudo service minidlna force-reload";
            }
            //잘라내기
            else if(cmd == 11){
                cutFile.val(targetList.refresh(select));
                if(cutFile.val() == '') alert("선택된 항목이 없습니다.");
                else alert(cutFile.val());
                return;
            }
            //붙여넣기
            else if(cmd == 12){
                if(cutFile.val() == ''){
                    alert("선택된 항목이 없습니다. ");
                    return;
                }
                sendCmd = "sudo mv " + cutFile.val() + ' ' + dir.pwd();
                alert("sendCmd : " + sendCmd);
            }
            //파일 삭제
            else if(cmd == 14) sendCmd = "sudo rm -rf " + targetList.refresh(select);
        }
        
        if(cmd != 10 && targetList.val().length == 0 && cutFile.val() == ''){
            alert("선택된 항목이 없습니다.")
            return;
        }

        $.ajax({
            type:"POST",
            url:"/control",
            data:{
                select : select,
                cmd : sendCmd
            },
            success:function(result){
                if($.trim(result.result) == 'err' || $.trim(result.result) == 'stderr'){
                    alert(result.data);
                }
                else{
                    if(cmd < 10) transmission();
                    else if(cmd == 10) alert("DLNA 새로고침 완료!");
                    else explorer();
                }
            }
        });
    }
</script>

<% include torrent.ejs %>
<% include transmission.ejs %>
<% include explorer.ejs %>
<% include ../share/footer.ejs %>